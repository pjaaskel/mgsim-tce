

If LSUs are independent they would have their own memory
port connection. They would handle the issuing of the memory 
operations and keeping track of the stalls and 
resolving them. They would be clients to the memory directly.

Who advances the cycle of the TTA core?

Could it work if they simply call the parent to ensure the cycle
has been advanced for that cycle. The parent keeps book of the last
MGSim cycle it has called for to avoid calling it multiple times
per simulated MGSim cycle.

Then the sequence would go something like this:

for each LSU (called by MGSim for each phase):
  // this simulates an instruction in the TTA, adds new memory operations to pending operations
  try_advance_cycle_of_TTA() // this does nothing after the very first call for the cycle
    ----> simulateCycle(OP) // ends up calling the simulateCycle() for each TTA operation in flight
  // now each LSU knows the new memory operations to issue as well as the old
  // pending operations for the LSU
  


